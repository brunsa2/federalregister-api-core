<div class="fulltextWrapper doc_<%= entry.granule_class.downcase%>">
  <% if entry.has_full_xml? %>
    <%=
      if entry.granule_class == 'PRORULE' && entry.full_xml =~ /AMDPAR/ && entry.full_xml !~ /REGTEXT/
        base_xml = transform_xml(entry.full_xml, 'entries/xslt/add_regtext.xslt', {}).to_s
      else
        base_xml = entry.full_xml
      end
      html = transform_xml(base_xml, 'entries/_full_text.html.xslt', {
        'first_page' => (entry.start_page.to_s),
        'volume' => entry.volume.to_s
      }.to_a.flatten).to_s
      html = remove_empty_nodes(html)
      html = handle_lstsub(handle_amdpar(html))
     add_citation_links(auto_link(html, :html => { :class => 'external wrap' }), :date => entry.publication_date) %>
  <% elsif entry.full_text %>
    <h3>Full text</h3>
      <pre><%=
        # FIXME: move out of view!
        text = html_escape(entry.full_text)
        text.sub!(/.*^-{71}$/m, '')
        text.gsub!(/<\/?INF>/, '')
        text.gsub!(/\[deg\]/, '&deg;')
        text.gsub!(/<A HREF="[^"]+">\s*([^<]+)<\/A>/, 'http://\1')
        text.gsub!(/^\[GRAPHIC\].*/, '')
        text.gsub!(/\s+\[\[Page \d+\]\]\s*/m, " ")
        # text.gsub!(/\n\n([A-Z].*(?:\n^\S.*)*)/, "\n\n<h3>\\1</h3>")
        # text.gsub!(/^    (.+(?:\n^\S.*)*)/, "<p>\\1</p>\n")
        text = add_citation_links(text)
        text.sub!(/<\/pre>.*/m, '')

        text.sub!(/\A\s+/, '')
        text.sub!(/\s+\Z/, '')
        text
      -%>
      </pre>
  <% end -%>
</div>
