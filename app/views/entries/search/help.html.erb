<%= title 'Search Help' %>
<div class="title"><span>Search Help</span></div>

<% section_tag(:id => 'content_area') do %>

  <p>We support numerous ways for you to customize your search. Some search options are available in the advanced search tool, and others are inherently available in the basic search entry box. The examples and search strategies in this help document describe search options you can use in the basic search entry box.</p>

  <p>Please note: The excerpt system we use to display matching text below each document returned by a search result is designed to help you determine if this is the document you are looking for. As a result when using the advanced features below this excerpt may not fully reflect the complexity of your query; however the documents matched will.</p>


  <h2 id="part_1" class="title_bar">Part I: Boolean Queries</h2>

  <p>Boolean queries support grouping, AND, OR, and NOT operations. This type of search allows you to include or exclude words. Grouping makes this even more powerful as shown in the example below.</p>

  <p>Usage:</p>
  <dl>
    <dt>AND:</dt> <dd><%= working_search_example('tensile & strength') %></dd>
    <dt>OR:</dt>  <dd><%= working_search_example('pipe | pipeline') %></dd>
    <dt>NOT:</dt> <dd><%= working_search_example('tensile -strength') %>, also <%= working_search_example('tensile !strength') %></dd>
    <dt>Grouping:</dt> <dd><%= working_search_example('(tensile & strength) & (pipe | pipeline)') %></dd>
  </dl>
  <p><strong>Example:</strong> If you are looking for documents related to tensile strength on pipelines, you may start your search with: <%= working_search_example('tensile strength pipelines') %>. This search would result in <%= entry_count_for_search_term('tensile strength pipelines') %> documents being returned.</p>

  <p>However you realize that the search is excluding content that only mentions pipes. You can then modify your search using grouping and the OR operator to be: <%= working_search_example('tensile strength (pipes | pipelines)') %>. This results in <%= entry_count_for_search_term('tensile strength (pipes | pipelines)') %> documents returned in search results.</p>

  <p>Now you notice that many of the documents are about waivers and antidumping, which don’t interest you. You can modify your search using the NOT operator as follows: <%= working_search_example('tensile strength (pipes | pipelines) -waiver -antidumping') %>. This results in a more manageable <%= entry_count_for_search_term('tensile strength (pipes | pipelines) -waiver -antidumping')%> results.</p>

  <h2 id="part_2" class="title_bar">Part II: Phrase Search</h2>

  <p>You can use quotes (<code>""</code>) to wrap some or all of your search terms. By wrapping terms in quotes you are telling the search engine to look for words that are ADJACENT to each other.</p>

  <p><strong>Example:</strong> To continue with the example in Part I above:  <%= working_search_example('tensile strength (pipes | pipelines) -waiver -antidumping') %>) you notice that documents are returned with either tensile or strength, but the terms are scattered throughout the document. You can refine your query with: <%= working_search_example('"tensile strength" (pipes | pipelines) -waiver -antidumping') %>. This results in <%= entry_count_for_search_term('"tensile strength" (pipes | pipelines) -waiver -antidumping') %> matches (fewer than before).</p>


  <h2 id="part_3" class="title_bar">Part III: Exact Form Searches</h2>

  <p>In our default search, we match words based on their stem word. So when you search <%= working_search_example('fish') %>, we also match documents containing 'fishing' and 'fished' (and vice versa). This holds true for plural forms as well, <%= working_search_example('fishery') %> also matches 'fisheries'. By using the exact form option, you can limit your search to exact matches of a word. Use the <code>=</code> operator in front of the word you wish to have exactly matched.</p>

  <p><strong>Usage:</strong> <%= working_search_example('=airworthiness') %>, matches only documents with the exact word 'airworthiness'.</p>

  <p><strong>Example:</strong> <%= working_search_example('=fishing') %> would only match documents with the word 'fishing' and not documents with the words 'fish' or 'fished'. Along the same lines <%= working_search_example('=fishery') %> would not match 'fisheries' only 'fishery'.</p>


  <h2 id="part_4" class="title_bar">Part IV: Proximity Searches</h2>

  <p>You can use a quoted string in a search to specify that you want a proximity match. Proximity (distance between words) is specified by entering the search terms and adjusted for overall word count. Proximity searches utilize the <code>~</code> operator followed by a number.</p>

  <p><strong>Usage:</strong> <%= working_search_example('"rebuilt parts"~2') %>, specifies that you are limiting your search to a span of less than 4 words that match. This search would match "rebuilt vehicular parts" but not "rebuilt foreign vehicular parts"</p>

  <p><strong>Example:</strong> If you were to search: <%= working_search_example('"rebuilt parts"') %> in FR2 you would get <%= entry_count_for_search_term('"rebuilt parts"') %> returned results. To expand your search incrementally, you can use a proximity search: <%= working_search_example('"rebuilt parts"~2') %> would allow matches on "rebuilt vehicular parts" and "rebuilt boat parts". A search for: <%= working_search_example('"rebuilt parts"~3') %> would allow matches on "rebuilt foreign vehicular parts" and "rebuilt domestic boat parts".</p>


  <h2 id="part_5" class="title_bar">Part V: Quorum Searches</h2>

  <p>You can use a quoted string quorum search to allow for a form of fuzzy matching. Quorum searches use the <code>'/'</code> operated followed by a number.</p>

  <p><strong>Usage:</strong> <%= working_search_example('"rebuilt foreign domestic vehicular boat parts"/3') %> would match any document that contains at least 3 of the 6 words. This is especially useful when you are looking for a familiar document with phrasing you remember or for documents that deal with a smaller subclass of common wording as in the example.</p>

  <p><strong>Example:</strong> Returning to the example in Part IV above, you could search: <%= working_search_example('"rebuilt vehicular boat parts"/3') %> which would allow matches on documents containing rebuilt, vehicular, and parts; rebuilt, boat, and parts; and vehicular, rebuilt, and parts. Remember this search is for matching words in a document, not a phrase matching using the <code>'~'</code> operator as shown in Part IV proximity searches.</p>


  <h2 id="part_6" class="title_bar">Part VI: Precedence Searches</h2>

  <p>We also support queries based on word (or phrase) ordering. This precedence search makes use of the <code>&lt;&lt;</code> operator and is useful when you know the rough order of words in a phrase in a document, but not the exact phrase.</p>

  <p><strong>Usage:</strong> <%= working_search_example('rebuilt << parts') %>, ensures that matches contain those words in the order indicated.</p>

  <p><strong>Example:</strong> Let’s say you are looking for a document that you know contains the words 'rebuilt', 'reclaimed', 'vehicular', and 'parts' in that order, but you aren't sure exactly how the phrase was constructed (perhaps it was: 'rebuilt or reclaimed vehicular and boat parts are now...'). By searching: <%= working_search_example('rebuilt << reclaimed << vehicular << parts') %>, you would match the items you are looking for without needing to know the exact order of the phrase in advance.</p>

  <p>Like many of the search types above, all of these search options can be combined to create more powerful searches (some more useful than others). To continue with our example in Part VI above, perhaps you wanted to search for phrases like, 'rebuilt and reclaimed vehicular parts' and 'rebuilt and reclaimed boat parts'. You could combine boolean operators with precedence searching and modify your search to be: <%= working_search_example('rebuilt << reclaimed << (vehicular | boat) << parts') %>, to match both of the new, slightly modified phrases.</p>

<% end %>

<% aside_tag(:id => 'sidebar') do %>
  <% section_tag(:id => 'relevant_links') do %>
    <h1 class="title_bar">Table of Contentes</h1>
    <ul class="bullets">
      <li><a href="#part_1">Part I: Boolean Queries</a></li>
      <li><a href="#part_2">Part II: Phrase Search</a></li>
      <li><a href="#part_3">Part III: Exact Form Searches</a></li>
      <li><a href="#part_4">Part IV: Proximity Searches</a></li>
      <li><a href="#part_5">Part V: Quorum Searches</a></li>
      <li><a href="#part_6">Part VI: Precedence Searches</h2>
    </ul>
  <% end -%>
<% end -%>
